<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FirstWeek</title>
      <link href="/2023/09/23/FirstWeek/"/>
      <url>/2023/09/23/FirstWeek/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Anaconda以及在Anaconda中安装Pytorch"><a href="#安装Anaconda以及在Anaconda中安装Pytorch" class="headerlink" title="安装Anaconda以及在Anaconda中安装Pytorch"></a>安装<em>Anaconda</em>以及在<em>Anaconda</em>中安装<em>Pytorch</em></h1><p>首先去清华镜像源下载<em>Anaconda</em>安装包，然后一路next进行安装，勾选环境变量就ok。<br>然后调出<em>Anaconda</em>的命令行创建Pytorch虚拟环境，命令如下。  </p><blockquote><p>conda create -n pytorch python&#x3D;3.8<br>conda activate pytorch 进入已经创建的虚拟环境。</p></blockquote><p>安装<em>Pytorch</em>：<br>建议离线下载安装，网址如下：  </p><blockquote><p><a href="https://download.python.org/">https://download.python.org</a>   </p></blockquote><p>首先在<em>Anaconda</em>命令行进入离线文件所在的文件夹，然后输入命令：*pip install “文件名字” 然后加一个镜像源，回车。</p><p>测试是否安装成功，代码如下：  </p><pre><code>import torchimport torchvisionprint(torch.__version__)</code></pre><p>如果如下图所示出现版本号则安装成功。</p><p>关闭<em>Anaconda</em>虚拟环境命令如下：  </p><blockquote><p>conda deactivate</p></blockquote><p><img src="/2023/09/23/FirstWeek/image-9.png" alt="Alt text"></p><h1 id="Learn-Pytorch-TensorBoard"><a href="#Learn-Pytorch-TensorBoard" class="headerlink" title="Learn Pytorch-TensorBoard"></a>Learn Pytorch-TensorBoard</h1><p><strong>Pytorch使用Tensorboard主要使用三个API</strong>     </p><p> — <em>SummaryWriter</em>：用来创建一个<em>log</em>文件，<em>TensorBoard</em>面板查看时，也是需要查看这个log文件。    </p><p> — <em>add_something</em>：向<em>log</em>文件中添加数据。例如可以通过<em>add_scalar</em>添加折线图数据，<em>add_image</em>可以添加图片。 </p><p> —    <em>close</em>：当训练结束后我们可以使用<em>close</em>方法结束log写入。</p><p><strong>Tensorboard启动</strong>    </p><p>首先要new一个<em>SummaryWriter</em>对象，然后向<em>log</em>中写入数据，最后在终端数据命令:</p><blockquote><p>tensorboard –logdir&#x3D;log(log文件夹名称)   </p></blockquote><p><img src="/2023/09/23/FirstWeek/image.png" alt="Alt text"><br><img src="/2023/09/23/FirstWeek/image-0.png" alt="Alt text"><br>点击链接就可以启动，如下图所示。  </p><p><img src="/2023/09/23/FirstWeek/image-1.png" alt="Alt text"></p><h1 id="Learn-Pytorch-Tensorforms"><a href="#Learn-Pytorch-Tensorforms" class="headerlink" title="Learn Pytorch-Tensorforms"></a>Learn Pytorch-Tensorforms</h1><p>— <em>tensorforms</em>常用类的方法有 <em>ToTensor</em>、<em>Normalize</em>、<em>Resize</em>、<em>Compose</em>、<em>RandomCrop</em>。  </p><p>在学习<em>tensorforms</em>前，首先需要学习一下常用的图片读取方式，以及读取后output的格式。</p><p><img src="/2023/09/23/FirstWeek/image-2.png" alt="Alt text">  </p><p>读取PIL图片：PIL图片可以理解微图片的基准类型，在此类型上进行各种格式的转换。</p><p><img src="/2023/09/23/FirstWeek/image-3.png" alt="Alt text"></p><p><strong>ToTensor 的使用（transforms.ToTensor）</strong><br><em>ToTensor</em>是<em>transforms</em>中的一个类，它可以被用来将<em>PIL Image</em>或者<em>numpy.ndarry</em>类型的图片格式转换为<em>tensor</em>格式。<br>代码如下图所示：</p><p><img src="/2023/09/23/FirstWeek/image-4.png" alt="Alt text"></p><p><strong>Normalize 的使用（transfoems.Normalize）</strong><br>根据传入的<em>mean</em>和<em>standard</em>将<em>tensor</em>格式的图片做归一化处理。只支持<em>tensor</em>格式，不支持<em>PIL</em>格式。<br>处理公式如下：</p><blockquote><p>output[channel] &#x3D; (input[channel] - mean[channel]) &#x2F; std[channel]</p></blockquote><p><img src="/2023/09/23/FirstWeek/image-5.png" alt="Alt text"></p><p><strong>Resize 的使用（transforms.Resize）</strong><br>对<em>PIL</em>或者<em>Tensor</em>类型图片重新调整大小，可以接受<em>sequence</em>或者<em>int</em>两种类型的参数。</p><p><em>sequence</em>：(H,W)。高H，宽W<br><em>int</em>：int。当参数为int时，会将图片W&#x2F;H中较小的边缘将会按int进行调整。</p><p><img src="/2023/09/23/FirstWeek/image-6.png" alt="Alt text"></p><p><strong>Compose 的使用（transforms.Compose）</strong><br>将<em>transforms</em>中的各种图像操作进行缝合，但是要注意，前一个变换的<em>output</em>的数据类型必须与后一个变换的<em>input</em>的数据类型相匹配。</p><p><img src="/2023/09/23/FirstWeek/image-7.png" alt="Alt text"></p><p><strong>RandomCrop 的使用（transforms.RandomCrop）</strong><br>对<em>PIL</em>或者<em>Tensor</em>类&#x3D;类型图片进行随机裁剪，可以接受<em>sequence</em>或者<em>int</em>两种类型的参数。  </p><p><em>sequence</em>：(H,W)。高H，宽W<br><em>int</em>：int。当参数为int时，将会进行int*int的裁剪。</p><p><img src="/2023/09/23/FirstWeek/image-8.png" alt="Alt text"></p><h1 id="torchvision中常用的数据集"><a href="#torchvision中常用的数据集" class="headerlink" title="torchvision中常用的数据集"></a>torchvision中常用的数据集</h1><p><strong>torchvision 基本介绍</strong><br><em>torchvision</em>是<em>pytorch</em>的一个图形库，它服务于<em>PyTorch</em>深度学习框架的，主要用来构建计算机视觉模型。一下是<em>torchvision</em>的基本构成。<br>1.<em>torchvision.datasets</em>：一些加载数据的函数集常用的数据集接口。<br>2.<em>torchvision.models</em>：包含常用的模型结构（含预训练模型），例如AlenNet、VGG等。<br>3.<em>torchvision.transforms</em>：常用的图片变换例如裁剪，旋转等。<br>4.<em>torchvision.utils</em>：其他的一些有用的方法。  </p><p><strong>torchvision 查看数据集</strong><br>可以在官网文档中查看数据集及其用法。  </p><p><strong>CIFAR10 数据集的使用</strong><br>使用CIFAR10数据集作为示范。<br>代码如下：  </p><p><img src="/2023/09/23/FirstWeek/image-10.png" alt="Alt text">  </p><p>分别实现了对数据的下载，从PIL格式转换成tensor格式，然后以其中10个图片作为展示，在tensorboard中展示出来。由于图像的分辨率较低，只有28×28，所以在tensorboard中的视觉效果较为模糊。tensorboard中的展示效果如下所示：  </p><p><img src="/2023/09/23/FirstWeek/image-11.png" alt="Alt text"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/23/hello-world/"/>
      <url>/2023/07/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
