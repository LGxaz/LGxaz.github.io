<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2024/08/16/test/"/>
      <url>/2024/08/16/test/</url>
      
        <content type="html"><![CDATA[<pre><code>&quot;&quot;&quot; Swin TransformerA PyTorch impl of : `Swin Transformer: Hierarchical Vision Transformer using Shifted Windows`    - https://arxiv.org/pdf/2103.14030Code/weights from https://github.com/microsoft/Swin-Transformer&quot;&quot;&quot;import torchimport torch.nn as nnimport torch.nn.functional as Fimport torch.utils.checkpoint as checkpointimport numpy as npfrom typing import Optionaldef drop_path_f(x, drop_prob: float = 0., training: bool = False):    &quot;&quot;&quot;Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,    the original name is misleading as &#39;Drop Connect&#39; is a different form of dropout in a separate paper...    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I&#39;ve opted for    changing the layer and argument names to &#39;drop path&#39; rather than mix DropConnect as a layer name and use    &#39;survival rate&#39; as the argument.    &quot;&quot;&quot;    if drop_prob == 0. or not training:        return x    keep_prob = 1 - drop_prob    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)    random_tensor.floor_()  # binarize    output = x.div(keep_prob) * random_tensor    return outputclass DropPath(nn.Module):    &quot;&quot;&quot;Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).    &quot;&quot;&quot;    def __init__(self, drop_prob=None):        super(DropPath, self).__init__()        self.drop_prob = drop_prob    def forward(self, x):        return drop_path_f(x, self.drop_prob, self.training)def window_partition(x, window_size: int):    &quot;&quot;&quot;    将feature map按照window_size划分成一个个没有重叠的window    Args:        x: (B, H, W, C)        window_size (int): window size(M)    Returns:        windows: (num_windows*B, window_size, window_size, C)    &quot;&quot;&quot;    B, H, W, C = x.shape    x = x.view(B, H // window_size, window_size, W // window_size, window_size, C)    # permute: [B, H//Mh, Mh, W//Mw, Mw, C] -&gt; [B, H//Mh, W//Mh, Mw, Mw, C]    # view: [B, H//Mh, W//Mw, Mh, Mw, C] -&gt; [B*num_windows, Mh, Mw, C]    windows = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(-1, window_size, window_size, C)    return windowsdef window_reverse(windows, window_size: int, H: int, W: int):    &quot;&quot;&quot;    将一个个window还原成一个feature map    Args:        windows: (num_windows*B, window_size, window_size, C)        window_size (int): Window size(M)        H (int): Height of image        W (int): Width of image    Returns:        x: (B, H, W, C)    &quot;&quot;&quot;    B = int(windows.shape[0] / (H * W / window_size / window_size))    # view: [B*num_windows, Mh, Mw, C] -&gt; [B, H//Mh, W//Mw, Mh, Mw, C]    x = windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)    # permute: [B, H//Mh, W//Mw, Mh, Mw, C] -&gt; [B, H//Mh, Mh, W//Mw, Mw, C]    # view: [B, H//Mh, Mh, W//Mw, Mw, C] -&gt; [B, H, W, C]    x = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)    return xclass PatchEmbed(nn.Module):    &quot;&quot;&quot;    2D Image to Patch Embedding    &quot;&quot;&quot;    def __init__(self, patch_size=4, in_c=3, embed_dim=96, norm_layer=None):        super().__init__()        patch_size = (patch_size, patch_size)        self.patch_size = patch_size        self.in_chans = in_c        self.embed_dim = embed_dim        self.proj = nn.Conv2d(in_c, embed_dim, kernel_size=patch_size, stride=patch_size)        self.norm = norm_layer(embed_dim) if norm_layer else nn.Identity()    def forward(self, x):        _, _, H, W = x.shape        # padding        # 如果输入图片的H，W不是patch_size的整数倍，需要进行padding        pad_input = (H % self.patch_size[0] != 0) or (W % self.patch_size[1] != 0)        if pad_input:            # to pad the last 3 dimensions,            # (W_left, W_right, H_top,H_bottom, C_front, C_back)            x = F.pad(x, (0, self.patch_size[1] - W % self.patch_size[1],                        0, self.patch_size[0] - H % self.patch_size[0],                        0, 0))        # 下采样patch_size倍        x = self.proj(x)        _, _, H, W = x.shape        # flatten: [B, C, H, W] -&gt; [B, C, HW]        # transpose: [B, C, HW] -&gt; [B, HW, C]        x = x.flatten(2).transpose(1, 2)        x = self.norm(x)        return x, H, Wclass PatchMerging(nn.Module):    r&quot;&quot;&quot; Patch Merging Layer.    Args:        dim (int): Number of input channels.        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm    &quot;&quot;&quot;    def __init__(self, dim, norm_layer=nn.LayerNorm):        super().__init__()        self.dim = dim        self.reduction = nn.Linear(4 * dim, 2 * dim, bias=False)        self.norm = norm_layer(4 * dim)    def forward(self, x, H, W):        &quot;&quot;&quot;        x: B, H*W, C        &quot;&quot;&quot;        B, L, C = x.shape        assert L == H * W, &quot;input feature has wrong size&quot;        x = x.view(B, H, W, C)        # padding        # 如果输入feature map的H，W不是2的整数倍，需要进行padding        pad_input = (H % 2 == 1) or (W % 2 == 1)        if pad_input:            # to pad the last 3 dimensions, starting from the last dimension and moving forward.            # (C_front, C_back, W_left, W_right, H_top, H_bottom)            # 注意这里的Tensor通道是[B, H, W, C]，所以会和官方文档有些不同            x = F.pad(x, (0, 0, 0, W % 2, 0, H % 2))        x0 = x[:, 0::2, 0::2, :]  # [B, H/2, W/2, C]        x1 = x[:, 1::2, 0::2, :]  # [B, H/2, W/2, C]        x2 = x[:, 0::2, 1::2, :]  # [B, H/2, W/2, C]        x3 = x[:, 1::2, 1::2, :]  # [B, H/2, W/2, C]        x = torch.cat([x0, x1, x2, x3], -1)  # [B, H/2, W/2, 4*C]        x = x.view(B, -1, 4 * C)  # [B, H/2*W/2, 4*C]        x = self.norm(x)        x = self.reduction(x)  # [B, H/2*W/2, 2*C]        return xclass Mlp(nn.Module):    &quot;&quot;&quot; MLP as used in Vision Transformer, MLP-Mixer and related networks    &quot;&quot;&quot;    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):        super().__init__()        out_features = out_features or in_features        hidden_features = hidden_features or in_features        self.fc1 = nn.Linear(in_features, hidden_features)        self.act = act_layer()        self.drop1 = nn.Dropout(drop)        self.fc2 = nn.Linear(hidden_features, out_features)        self.drop2 = nn.Dropout(drop)    def forward(self, x):        x = self.fc1(x)        x = self.act(x)        x = self.drop1(x)        x = self.fc2(x)        x = self.drop2(x)        return xclass WindowAttention(nn.Module):    r&quot;&quot;&quot; Window based multi-head self attention (W-MSA) module with relative position bias.    It supports both of shifted and non-shifted window.    Args:        dim (int): Number of input channels.        window_size (tuple[int]): The height and width of the window.        num_heads (int): Number of attention heads.        qkv_bias (bool, optional):  If True, add a learnable bias to query, key, value. Default: True        attn_drop (float, optional): Dropout ratio of attention weight. Default: 0.0        proj_drop (float, optional): Dropout ratio of output. Default: 0.0    &quot;&quot;&quot;    def __init__(self, dim, window_size, num_heads, qkv_bias=True, attn_drop=0., proj_drop=0.):        super().__init__()        self.dim = dim        self.window_size = window_size  # [Mh, Mw]        self.num_heads = num_heads        head_dim = dim // num_heads        self.scale = head_dim ** -0.5        # define a parameter table of relative position bias        self.relative_position_bias_table = nn.Parameter(            torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads))  # [2*Mh-1 * 2*Mw-1, nH]        # get pair-wise relative position index for each token inside the window        coords_h = torch.arange(self.window_size[0])        coords_w = torch.arange(self.window_size[1])        coords = torch.stack(torch.meshgrid([coords_h, coords_w], indexing=&quot;ij&quot;))  # [2, Mh, Mw]        coords_flatten = torch.flatten(coords, 1)  # [2, Mh*Mw]        # [2, Mh*Mw, 1] - [2, 1, Mh*Mw]        relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :]  # [2, Mh*Mw, Mh*Mw]        relative_coords = relative_coords.permute(1, 2, 0).contiguous()  # [Mh*Mw, Mh*Mw, 2]        relative_coords[:, :, 0] += self.window_size[0] - 1  # shift to start from 0        relative_coords[:, :, 1] += self.window_size[1] - 1        relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1        relative_position_index = relative_coords.sum(-1)  # [Mh*Mw, Mh*Mw]        self.register_buffer(&quot;relative_position_index&quot;, relative_position_index)        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)        self.attn_drop = nn.Dropout(attn_drop)        self.proj = nn.Linear(dim, dim)        self.proj_drop = nn.Dropout(proj_drop)        nn.init.trunc_normal_(self.relative_position_bias_table, std=.02)        self.softmax = nn.Softmax(dim=-1)    def forward(self, x, mask: Optional[torch.Tensor] = None):        &quot;&quot;&quot;        Args:            x: input features with shape of (num_windows*B, Mh*Mw, C)            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None        &quot;&quot;&quot;        # [batch_size*num_windows, Mh*Mw, total_embed_dim]        B_, N, C = x.shape        # qkv(): -&gt; [batch_size*num_windows, Mh*Mw, 3 * total_embed_dim]        # reshape: -&gt; [batch_size*num_windows, Mh*Mw, 3, num_heads, embed_dim_per_head]        # permute: -&gt; [3, batch_size*num_windows, num_heads, Mh*Mw, embed_dim_per_head]        qkv = self.qkv(x).reshape(B_, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)        # [batch_size*num_windows, num_heads, Mh*Mw, embed_dim_per_head]        q, k, v = qkv.unbind(0)  # make torchscript happy (cannot use tensor as tuple)        # transpose: -&gt; [batch_size*num_windows, num_heads, embed_dim_per_head, Mh*Mw]        # @: multiply -&gt; [batch_size*num_windows, num_heads, Mh*Mw, Mh*Mw]        q = q * self.scale        attn = (q @ k.transpose(-2, -1))        # relative_position_bias_table.view: [Mh*Mw*Mh*Mw,nH] -&gt; [Mh*Mw,Mh*Mw,nH]        relative_position_bias = self.relative_position_bias_table[self.relative_position_index.view(-1)].view(            self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)        relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # [nH, Mh*Mw, Mh*Mw]        attn = attn + relative_position_bias.unsqueeze(0)        if mask is not None:            # mask: [nW, Mh*Mw, Mh*Mw]            nW = mask.shape[0]  # num_windows            # attn.view: [batch_size, num_windows, num_heads, Mh*Mw, Mh*Mw]            # mask.unsqueeze: [1, nW, 1, Mh*Mw, Mh*Mw]            attn = attn.view(B_ // nW, nW, self.num_heads, N, N) + mask.unsqueeze(1).unsqueeze(0)            attn = attn.view(-1, self.num_heads, N, N)            attn = self.softmax(attn)        else:            attn = self.softmax(attn)        attn = self.attn_drop(attn)        # @: multiply -&gt; [batch_size*num_windows, num_heads, Mh*Mw, embed_dim_per_head]        # transpose: -&gt; [batch_size*num_windows, Mh*Mw, num_heads, embed_dim_per_head]        # reshape: -&gt; [batch_size*num_windows, Mh*Mw, total_embed_dim]        x = (attn @ v).transpose(1, 2).reshape(B_, N, C)        x = self.proj(x)        x = self.proj_drop(x)        return xclass SwinTransformerBlock(nn.Module):    r&quot;&quot;&quot; Swin Transformer Block.    Args:        dim (int): Number of input channels.        num_heads (int): Number of attention heads.        window_size (int): Window size.        shift_size (int): Shift size for SW-MSA.        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True        drop (float, optional): Dropout rate. Default: 0.0        attn_drop (float, optional): Attention dropout rate. Default: 0.0        drop_path (float, optional): Stochastic depth rate. Default: 0.0        act_layer (nn.Module, optional): Activation layer. Default: nn.GELU        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm    &quot;&quot;&quot;    def __init__(self, dim, num_heads, window_size=7, shift_size=0,                mlp_ratio=4., qkv_bias=True, drop=0., attn_drop=0., drop_path=0.,                act_layer=nn.GELU, norm_layer=nn.LayerNorm):        super().__init__()        self.dim = dim        self.num_heads = num_heads        self.window_size = window_size        self.shift_size = shift_size        self.mlp_ratio = mlp_ratio        assert 0 &lt;= self.shift_size &lt; self.window_size, &quot;shift_size must in 0-window_size&quot;        self.norm1 = norm_layer(dim)        self.attn = WindowAttention(            dim, window_size=(self.window_size, self.window_size), num_heads=num_heads, qkv_bias=qkv_bias,            attn_drop=attn_drop, proj_drop=drop)        self.drop_path = DropPath(drop_path) if drop_path &gt; 0. else nn.Identity()        self.norm2 = norm_layer(dim)        mlp_hidden_dim = int(dim * mlp_ratio)        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)    def forward(self, x, attn_mask):        H, W = self.H, self.W        B, L, C = x.shape        assert L == H * W, &quot;input feature has wrong size&quot;        shortcut = x        x = self.norm1(x)        x = x.view(B, H, W, C)        # pad feature maps to multiples of window size        # 把feature map给pad到window size的整数倍        pad_l = pad_t = 0        pad_r = (self.window_size - W % self.window_size) % self.window_size        pad_b = (self.window_size - H % self.window_size) % self.window_size        x = F.pad(x, (0, 0, pad_l, pad_r, pad_t, pad_b))        _, Hp, Wp, _ = x.shape        # cyclic shift        if self.shift_size &gt; 0:            shifted_x = torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))        else:            shifted_x = x            attn_mask = None        # partition windows        x_windows = window_partition(shifted_x, self.window_size)  # [nW*B, Mh, Mw, C]        x_windows = x_windows.view(-1, self.window_size * self.window_size, C)  # [nW*B, Mh*Mw, C]        # W-MSA/SW-MSA        attn_windows = self.attn(x_windows, mask=attn_mask)  # [nW*B, Mh*Mw, C]        # merge windows        attn_windows = attn_windows.view(-1, self.window_size, self.window_size, C)  # [nW*B, Mh, Mw, C]        shifted_x = window_reverse(attn_windows, self.window_size, Hp, Wp)  # [B, H&#39;, W&#39;, C]        # reverse cyclic shift        if self.shift_size &gt; 0:            x = torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))        else:            x = shifted_x        if pad_r &gt; 0 or pad_b &gt; 0:            # 把前面pad的数据移除掉            x = x[:, :H, :W, :].contiguous()        x = x.view(B, H * W, C)        # FFN        x = shortcut + self.drop_path(x)        x = x + self.drop_path(self.mlp(self.norm2(x)))        return xclass BasicLayer(nn.Module):    &quot;&quot;&quot;    A basic Swin Transformer layer for one stage.    Args:        dim (int): Number of input channels.        depth (int): Number of blocks.        num_heads (int): Number of attention heads.        window_size (int): Local window size.        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True        drop (float, optional): Dropout rate. Default: 0.0        attn_drop (float, optional): Attention dropout rate. Default: 0.0        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm        downsample (nn.Module | None, optional): Downsample layer at the end of the layer. Default: None        use_checkpoint (bool): Whether to use checkpointing to save memory. Default: False.    &quot;&quot;&quot;    def __init__(self, dim, depth, num_heads, window_size,                mlp_ratio=4., qkv_bias=True, drop=0., attn_drop=0.,                drop_path=0., norm_layer=nn.LayerNorm, downsample=None, use_checkpoint=False):        super().__init__()        self.dim = dim        self.depth = depth        self.window_size = window_size        self.use_checkpoint = use_checkpoint        self.shift_size = window_size // 2        # build blocks        self.blocks = nn.ModuleList([            SwinTransformerBlock(                dim=dim,                num_heads=num_heads,                window_size=window_size,                shift_size=0 if (i % 2 == 0) else self.shift_size,                mlp_ratio=mlp_ratio,                qkv_bias=qkv_bias,                drop=drop,                attn_drop=attn_drop,                drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path,                norm_layer=norm_layer)            for i in range(depth)])        # patch merging layer        if downsample is not None:            self.downsample = downsample(dim=dim, norm_layer=norm_layer)        else:            self.downsample = None    def create_mask(self, x, H, W):        # calculate attention mask for SW-MSA        # 保证Hp和Wp是window_size的整数倍        Hp = int(np.ceil(H / self.window_size)) * self.window_size        Wp = int(np.ceil(W / self.window_size)) * self.window_size        # 拥有和feature map一样的通道排列顺序，方便后续window_partition        img_mask = torch.zeros((1, Hp, Wp, 1), device=x.device)  # [1, Hp, Wp, 1]        h_slices = (slice(0, -self.window_size),                    slice(-self.window_size, -self.shift_size),                    slice(-self.shift_size, None))        w_slices = (slice(0, -self.window_size),                    slice(-self.window_size, -self.shift_size),                    slice(-self.shift_size, None))        cnt = 0        for h in h_slices:            for w in w_slices:                img_mask[:, h, w, :] = cnt                cnt += 1        mask_windows = window_partition(img_mask, self.window_size)  # [nW, Mh, Mw, 1]        mask_windows = mask_windows.view(-1, self.window_size * self.window_size)  # [nW, Mh*Mw]        attn_mask = mask_windows.unsqueeze(1) - mask_windows.unsqueeze(2)  # [nW, 1, Mh*Mw] - [nW, Mh*Mw, 1]        # [nW, Mh*Mw, Mh*Mw]        attn_mask = attn_mask.masked_fill(attn_mask != 0, float(-100.0)).masked_fill(attn_mask == 0, float(0.0))        return attn_mask    def forward(self, x, H, W):        attn_mask = self.create_mask(x, H, W)  # [nW, Mh*Mw, Mh*Mw]        for blk in self.blocks:            blk.H, blk.W = H, W            if not torch.jit.is_scripting() and self.use_checkpoint:                x = checkpoint.checkpoint(blk, x, attn_mask)            else:                x = blk(x, attn_mask)        if self.downsample is not None:            x = self.downsample(x, H, W)            H, W = (H + 1) // 2, (W + 1) // 2        return x, H, Wclass SwinTransformer(nn.Module):    r&quot;&quot;&quot; Swin Transformer        A PyTorch impl of : `Swin Transformer: Hierarchical Vision Transformer using Shifted Windows`  -        https://arxiv.org/pdf/2103.14030    Args:        patch_size (int | tuple(int)): Patch size. Default: 4        in_chans (int): Number of input image channels. Default: 3        num_classes (int): Number of classes for classification head. Default: 1000        embed_dim (int): Patch embedding dimension. Default: 96        depths (tuple(int)): Depth of each Swin Transformer layer.        num_heads (tuple(int)): Number of attention heads in different layers.        window_size (int): Window size. Default: 7        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim. Default: 4        qkv_bias (bool): If True, add a learnable bias to query, key, value. Default: True        drop_rate (float): Dropout rate. Default: 0        attn_drop_rate (float): Attention dropout rate. Default: 0        drop_path_rate (float): Stochastic depth rate. Default: 0.1        norm_layer (nn.Module): Normalization layer. Default: nn.LayerNorm.        patch_norm (bool): If True, add normalization after patch embedding. Default: True        use_checkpoint (bool): Whether to use checkpointing to save memory. Default: False    &quot;&quot;&quot;    def __init__(self, patch_size=4, in_chans=3, num_classes=1000,                embed_dim=96, depths=(2, 2, 6, 2), num_heads=(3, 6, 12, 24),                window_size=7, mlp_ratio=4., qkv_bias=True,                drop_rate=0., attn_drop_rate=0., drop_path_rate=0.1,                norm_layer=nn.LayerNorm, patch_norm=True,                use_checkpoint=False, **kwargs):        super().__init__()        self.num_classes = num_classes        self.num_layers = len(depths)        self.embed_dim = embed_dim        self.patch_norm = patch_norm        # stage4输出特征矩阵的channels        self.num_features = int(embed_dim * 2 ** (self.num_layers - 1))        self.mlp_ratio = mlp_ratio        # split image into non-overlapping patches        self.patch_embed = PatchEmbed(            patch_size=patch_size, in_c=in_chans, embed_dim=embed_dim,            norm_layer=norm_layer if self.patch_norm else None)        self.pos_drop = nn.Dropout(p=drop_rate)        # stochastic depth        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, sum(depths))]  # stochastic depth decay rule        # build layers        self.layers = nn.ModuleList()        for i_layer in range(self.num_layers):            # 注意这里构建的stage和论文图中有些差异            # 这里的stage不包含该stage的patch_merging层，包含的是下个stage的            layers = BasicLayer(dim=int(embed_dim * 2 ** i_layer),                                depth=depths[i_layer],                                num_heads=num_heads[i_layer],                                window_size=window_size,                                mlp_ratio=self.mlp_ratio,                                qkv_bias=qkv_bias,                                drop=drop_rate,                                attn_drop=attn_drop_rate,                                drop_path=dpr[sum(depths[:i_layer]):sum(depths[:i_layer + 1])],                                norm_layer=norm_layer,                                downsample=PatchMerging if (i_layer &lt; self.num_layers - 1) else None,                                use_checkpoint=use_checkpoint)            self.layers.append(layers)        self.norm = norm_layer(self.num_features)        self.avgpool = nn.AdaptiveAvgPool1d(1)        self.head = nn.Linear(self.num_features, num_classes) if num_classes &gt; 0 else nn.Identity()        self.apply(self._init_weights)    def _init_weights(self, m):        if isinstance(m, nn.Linear):            nn.init.trunc_normal_(m.weight, std=.02)            if isinstance(m, nn.Linear) and m.bias is not None:                nn.init.constant_(m.bias, 0)        elif isinstance(m, nn.LayerNorm):            nn.init.constant_(m.bias, 0)            nn.init.constant_(m.weight, 1.0)    def forward(self, x):        # x: [B, L, C]        x, H, W = self.patch_embed(x)        x = self.pos_drop(x)        for layer in self.layers:            x, H, W = layer(x, H, W)        x = self.norm(x)  # [B, L, C]        x = self.avgpool(x.transpose(1, 2))  # [B, C, 1]        x = torch.flatten(x, 1)        x = self.head(x)        return xdef swin_tiny_patch4_window7_224(num_classes: int = 1000, **kwargs):    # trained ImageNet-1K    # https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth    model = SwinTransformer(in_chans=3,                            patch_size=4,                            window_size=7,                            embed_dim=96,                            depths=(2, 2, 6, 2),                            num_heads=(3, 6, 12, 24),                            num_classes=num_classes,                            **kwargs)    return modeldef swin_small_patch4_window7_224(num_classes: int = 1000, **kwargs):    # trained ImageNet-1K    # https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth    model = SwinTransformer(in_chans=3,                            patch_size=4,                            window_size=7,                            embed_dim=96,                            depths=(2, 2, 18, 2),                            num_heads=(3, 6, 12, 24),                            num_classes=num_classes,                            **kwargs)    return modeldef swin_base_patch4_window7_224(num_classes: int = 1000, **kwargs):    # trained ImageNet-1K    # https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window7_224.pth    model = SwinTransformer(in_chans=3,                            patch_size=4,                            window_size=7,                            embed_dim=128,                            depths=(2, 2, 18, 2),                            num_heads=(4, 8, 16, 32),                            num_classes=num_classes,                            **kwargs)    return modeldef swin_base_patch4_window12_384(num_classes: int = 1000, **kwargs):    # trained ImageNet-1K    # https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384.pth    model = SwinTransformer(in_chans=3,                            patch_size=4,                            window_size=12,                            embed_dim=128,                            depths=(2, 2, 18, 2),                            num_heads=(4, 8, 16, 32),                            num_classes=num_classes,                            **kwargs)    return modeldef swin_base_patch4_window7_224_in22k(num_classes: int = 21841, **kwargs):    # trained ImageNet-22K    # https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window7_224_22k.pth    model = SwinTransformer(in_chans=3,                            patch_size=4,                            window_size=7,                            embed_dim=128,                            depths=(2, 2, 18, 2),                            num_heads=(4, 8, 16, 32),                            num_classes=num_classes,                            **kwargs)    return modeldef swin_base_patch4_window12_384_in22k(num_classes: int = 21841, **kwargs):    # trained ImageNet-22K    # https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth    model = SwinTransformer(in_chans=3,                            patch_size=4,                            window_size=12,                            embed_dim=128,                            depths=(2, 2, 18, 2),                            num_heads=(4, 8, 16, 32),                            num_classes=num_classes,                            **kwargs)    return modeldef swin_large_patch4_window7_224_in22k(num_classes: int = 21841, **kwargs):    # trained ImageNet-22K    # https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_large_patch4_window7_224_22k.pth    model = SwinTransformer(in_chans=3,                            patch_size=4,                            window_size=7,                            embed_dim=192,                            depths=(2, 2, 18, 2),                            num_heads=(6, 12, 24, 48),                            num_classes=num_classes,                            **kwargs)    return modeldef swin_large_patch4_window12_384_in22k(num_classes: int = 21841, **kwargs):    # trained ImageNet-22K    # https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_large_patch4_window12_384_22k.pth    model = SwinTransformer(in_chans=3,                            patch_size=4,                            window_size=12,                            embed_dim=192,                            depths=(2, 2, 18, 2),                            num_heads=(6, 12, 24, 48),                            num_classes=num_classes,                            **kwargs)    return model</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sikao</title>
      <link href="/2024/07/17/sikao/"/>
      <url>/2024/07/17/sikao/</url>
      
        <content type="html"><![CDATA[<h1 id="一些论文思想思考"><a href="#一些论文思想思考" class="headerlink" title="一些论文思想思考"></a>一些论文思想思考</h1><h2 id="首先实现多路径图像信息采集（两种方式最后进行特征融合）思考1"><a href="#首先实现多路径图像信息采集（两种方式最后进行特征融合）思考1" class="headerlink" title="首先实现多路径图像信息采集（两种方式最后进行特征融合）思考1"></a>首先实现多路径图像信息采集（两种方式最后进行特征融合）思考1</h2><p>可以使用transformer与CNN结合在CNN中加入二阶注意力机制并融合为单块网络进行重复，在特征采集重复一半时直接进行上采样，如果是二倍或三倍放大分辨率可以上采样后加入一层卷积进行图像尺寸大小减半（但是这种方法可能会造成图像特征损失，可以后续思考新的方法），四倍放大分辨率直接进行二倍上采样然后继续进行后半部分的网络块重复在最后再加入一层上采样得到四倍扩大分辨率图像。</p><h2 id="小块的实现"><a href="#小块的实现" class="headerlink" title="小块的实现"></a>小块的实现</h2><p>可以从图像矩阵的行和列进行不同的卷积，然后进行融合减少计算量。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>report2</title>
      <link href="/2024/07/11/report2/"/>
      <url>/2024/07/11/report2/</url>
      
        <content type="html"><![CDATA[<h1 id="双线性池化（Biliner-Pooling）详解、改进及应用"><a href="#双线性池化（Biliner-Pooling）详解、改进及应用" class="headerlink" title="双线性池化（Biliner Pooling）详解、改进及应用"></a>双线性池化（Biliner Pooling）详解、改进及应用</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>biliner pooling主要用于特征融合，对于从同一个样本提取出来的特征x和特征y，通过biliner pooling得到两个特征融合后的向量。如果特征x和特征y来自两个特征提取器，则被称为多模双线性池化（MBP，Multimodal Bilinear Pooling）。如果特征x&#x3D;特征y，则被称为同源双线性池化（HBP，Homogeneous Bilinear Pooling）或者二阶池化（Second-order Pooling）。  </p><h2 id="biliner-pooling详解"><a href="#biliner-pooling详解" class="headerlink" title="biliner pooling详解"></a>biliner pooling详解</h2><p>这里参考《Bilinear CNN Models for Fine-grained Visual Recognition》，CVPR 2015一文，给出bilinear pooling的详细定义。<br><img src="/2024/07/11/report2/2e6be49d4cf34e15901fe4c0aa98a656.png" alt="alt text"><br>作者使用bilinear pooling对两种特征提取器进行融合，再用于fine-grained分类，取得不错的效果。bilinear pooling的形式简单，便于梯度反向传播，进而实现端到端的训练。<br><img src="/2024/07/11/report2/2434788ffd6a481b984d96b54bcc685b.png" alt="alt text">  </p><h2 id="Second-orderPooling"><a href="#Second-orderPooling" class="headerlink" title="Second-orderPooling"></a>Second-orderPooling</h2><p>Second-order Pooling最早出自ECCV2012的文章《Semantic segmentation with second-order pooling》，原文对Second-order Pooling的定义如下<br><img src="/2024/07/11/report2/d363bdc0f6684fbba933c4ae31e90161.png" alt="alt text"><br>由于Second-order Pooling用到了特征 X 的二阶信息，所以在一些任务下能比一阶信息表现更为优秀。<br>对比bilinear pooling的定义，不难发现，当 fA &#x3D; fB 的时候，二者是等价的。也就是说，二阶池化（Second-order Pooling）&#x3D;同源双线性池化（HBP，Homogeneous Bilinear Pooling）。  </p><h2 id="从bilinear-pooling到billinear-model"><a href="#从bilinear-pooling到billinear-model" class="headerlink" title="从bilinear pooling到billinear model"></a>从bilinear pooling到billinear model</h2><p>《Factorized bilinear models for image recognition》是ICCV2017的文章，虽然本文也是针对HBP的研究，但成功地把bilinear model与bilinear pooling联系起来。而后面的工作MLB正是从bilinear model的角度出发去改进MBP。<br>首先介绍bilinear model，对于特征向量 X 和特征向量 Y ，bilinear model是指形如<br><img src="/2024/07/11/report2/418ca571a7a74ec49b094a3a21cb5e2e.png" alt="alt text">   </p><h2 id="MLB：Multimodal-Low-rank-Bilinear-Pooling"><a href="#MLB：Multimodal-Low-rank-Bilinear-Pooling" class="headerlink" title="MLB：Multimodal Low-rank Bilinear Pooling"></a>MLB：Multimodal Low-rank Bilinear Pooling</h2><p>有了上篇工作的介绍，理解MLB就非常容易了，MLB出自ICLR2017的文章《 Hadamard product for low-rank bilinear pooling》。文章核心是用Hadamard积（就是按元素乘）来实现bilinear model，把<br><img src="/2024/07/11/report2/2312b7ec74624600bfad9dface7c506d.png" alt="alt text">  </p><h2 id="MFB：Multi-modal-factorized-bilinear-pooling"><a href="#MFB：Multi-modal-factorized-bilinear-pooling" class="headerlink" title="MFB：Multi-modal factorized bilinear pooling"></a>MFB：Multi-modal factorized bilinear pooling</h2><p>MFB出自ICCV2017《Multi-modal factorized bilinear pooling with co-attention learning for visual question answering》。本文的思路与MLB十分相似，不同点在于当希望bilinear model的输出是向量的时候，本文直接把U和V变成了三维张量，再通过sum pooling来进行通道融合得到最后的输出。<br><img src="/2024/07/11/report2/c8623c751a874c18aa7a0fa712136552.png" alt="alt text"><br>在MFB的基础上，作者于《Beyond bilinear: Generalized multimodal factorized high-order pooling for visual question answering》一文中提出了MFH（Multi-modal factorized high-order pooling ）。把MFB操作分为两个阶段Expand Stage和Squeeze Stage，MFH就是把MFB堆叠起来以得到高阶信息，如下图所示<br><img src="/2024/07/11/report2/8b42d482b30346b3bcea4df15d7458d8.png" alt="alt text">  </p><h2 id="MPN-Cov-Is-Second-order-Information-Helpful-for-Large-scale-Visual-Recognition"><a href="#MPN-Cov-Is-Second-order-Information-Helpful-for-Large-scale-Visual-Recognition" class="headerlink" title="(MPN-Cov)Is Second-order Information Helpful for Large-scale Visual Recognition"></a>(MPN-Cov)Is Second-order Information Helpful for Large-scale Visual Recognition</h2><p>提出矩阵幂归一化协方差（MPN-COV）方法即使用二阶信息进行归一化。开发了非线性矩阵函数的前向和后向传播公式。<br><img src="/2024/07/11/report2/%E5%9B%BE%E7%89%871.png" alt="alt text">  </p><h2 id="Second-order-Attention-Network-for-Single-Image-Super-Resolution"><a href="#Second-order-Attention-Network-for-Single-Image-Super-Resolution" class="headerlink" title="Second-order Attention Network for Single Image Super-Resolution"></a>Second-order Attention Network for Single Image Super-Resolution</h2><p>提出了一个深的二阶注意力网络SAN，以获得更好的特征表达和特征相关性学习。特别地，提出了一个二阶通道注意力机制SOCA来进行相关性学习。同时，提出了一个non-locally增强残差组NLRG来捕获长距离空间内容信息。<br><img src="/2024/07/11/report2/Snipaste_2024-07-12_18-01-25.jpg" alt="alt text"><br>首先，SAN主要分为四个部分，浅层特征提取，基于非局部增强残差组的深度特征提取，上采样模块以及重建模块。采用一层卷积层来提取浅层特征然后深度特征上采样特征最后重建。<br>这篇文章中的二阶通道注意力灵感主要是来自于上篇文章。相比于SENet里面的通道attention使用的是一阶统计信息（通过全局平均池化），本SOCA探索了二阶特征统计的attention。使用协方差归一化协方差可以用来描述变量之间的相关性，所以对于HxWxC的特征，reshape为WH（C个维度），可以用协方差矩阵描述C个通道之间的相关性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AUTO部署远程服务器教程</title>
      <link href="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="AutoDL部署远程服务器教程"><a href="#AutoDL部署远程服务器教程" class="headerlink" title="AutoDL部署远程服务器教程"></a>AutoDL部署远程服务器教程</h1><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>首先登陆AutoDL官网：<a href="https://www.autodl.com/market/list">https://www.autodl.com/market/list</a><br>然后创建账号登陆</p><h2 id="建立容器实例"><a href="#建立容器实例" class="headerlink" title="建立容器实例"></a>建立容器实例</h2><p><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-23-31.png" alt="Alt text"><br>在主页点击算力市场  选择适合自己的GPU  推荐RTX3090<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-25-07.png" alt="Alt text"><br>点击一卡可租<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-25-48.png" alt="Alt text"><br>选择按量计费，GPU数量填1，也可多填几个防止GPU数量不充足。然后选择镜像，点击基础镜像，这里我选择的是RTX4090显卡，所以选择了Pytorch 2.0，Cuda11.8，大家可以根据自己选择的显卡设置不同的镜像版本。<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-27-41.png" alt="Alt text"><br>配置好镜像后点击立即创建。之后会跳转到实例容器管理。首先先将实例关机不然有卡开机会持续扣钱，在配完环境后再选择有卡开机。<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-30-01.png" alt="Alt text"><br>我们选择无卡开机。<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-31-45.png" alt="Alt text"></p><h2 id="链接PyCharm"><a href="#链接PyCharm" class="headerlink" title="链接PyCharm"></a>链接PyCharm</h2><p>首先我们需要安装专业版Pycharm，可以去看教程如何激活专业版Pycharm，如果是学生可以使用学生教育优惠每年认证一次，可免费使用，教程放在下面。  </p><blockquote><ul><li>非学生激活：<a href="http://t.csdnimg.cn/oqCcP">http://t.csdnimg.cn/oqCcP</a></li><li>学生激活：<a href="http://t.csdnimg.cn/jdEAu">http://t.csdnimg.cn/jdEAu</a></li></ul></blockquote><p>打开专业版Pycharm<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-39-30.png" alt="Alt text"><br>在设置中进入这个页面然后点击ssh 弹出下面这个页面<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-40-18.png" alt="Alt text"><br>然后在容器实例中复制登陆指令，ssh -p 37013 <a href="mailto:&#x72;&#111;&#111;&#x74;&#64;&#x63;&#x6f;&#110;&#x6e;&#101;&#x63;&#x74;&#46;&#x77;&#101;&#x73;&#116;&#x63;&#x2e;&#x67;&#x70;&#117;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#x72;&#111;&#111;&#x74;&#64;&#x63;&#x6f;&#110;&#x6e;&#101;&#x63;&#x74;&#46;&#x77;&#101;&#x73;&#116;&#x63;&#x2e;&#x67;&#x70;&#117;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;</a><br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-43-43.png" alt="Alt text"><br>其中37013是端口号，root是用户名，connect.westc.gpuhub.com是主机名，将主机名填入上图主机，root填入用户名，端口号填入端口，然后就可以点击下一步。<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-44-58.png" alt="Alt text"><br>在这个页面中填入密码，就是上上图中密码位置，复制下来填入，然后点击下一步。<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-46-14.png" alt="Alt text"><br>出现这个页面，然后我们选择项目存放位置，一定要改，因为默认存放在系统盘，会影响后续运行，我们改到固态盘，在root&#x2F;autodl-tmp，然后我们创建一个新文件夹存放项目。记得一定要选上自动同步服务器。<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-47-57.png" alt="Alt text"><br>之后点击创建就会创建成功。然后我们点击工具点击启动SSH会话，选择我们的端口号对应的。<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-53-30.png" alt="Alt text"></p><p>你可以就在base中安装依赖，但我建议创建虚拟环境（使用虚拟环境可以避免包的混乱和版本冲突）<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_20-56-30.png" alt="Alt text"></p><h2 id="数据集传输"><a href="#数据集传输" class="headerlink" title="数据集传输"></a>数据集传输</h2><p>通过xftp上传数据集，直接手动拖拽上传即可。直接去官网下载xftp，然后链接服务器方式和Pycharm相同。<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/090003608512d344cbe721dde0d68afb.png" alt="Alt text"></p><h2 id="配置远程服务器环境"><a href="#配置远程服务器环境" class="headerlink" title="配置远程服务器环境"></a>配置远程服务器环境</h2><p>由于网络以及版本不适配等原因，我推荐离线安装Pytorch。</p><blockquote><ul><li>离线安装包网站：<a href="https://download.pytorch.org/whl/torch_stable.html">https://download.pytorch.org/whl/torch_stable.html</a></li></ul></blockquote><p><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_21-02-57.png" alt="Alt text"><br>cu为GPU版本，选择自己适配的版本，可以和我们选择的镜像一致，在这里推荐下载torchaudio，这个包非常小便于传输，然后是选择linux版本，因为我们的远程服务器环境是linux的。<br>下载完成后传输到远程服务器环境中<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_21-11-11.png" alt="Alt text"><br>因为我们创建的虚拟环境是在这个路径中，所以我们将安装包存放在这个文件夹下，我的虚拟环境名称是pytorch，所以我重新创建一个文件夹torch存放安装包，将安装包传输到torch下，然后可以着手安装。<br>启动ssh会话，在终端中输入下列命令</p><blockquote><ul><li>conda activate pytorch</li><li>cd miniconda3&#x2F;envs&#x2F;torch</li><li>pip install torchaudio-2.0.1+cu118-cp38-cp38-linux_x86_64.whl</li></ul></blockquote><p>第三个命令install后为你的安装包名然后回车，等待安装完成。</p><h2 id="使用远程服务器训练"><a href="#使用远程服务器训练" class="headerlink" title="使用远程服务器训练"></a>使用远程服务器训练</h2><p>在ssh会话中进入pytorch环境，输入python然后输入一下命令测试是否安装成功。<br><img src="/2024/03/25/AUTO%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/Snipaste_2024-03-25_21-18-28.png" alt="Alt text"></p><p>关于训练技巧方面，我们上传项目和数据集的时候，建议分开，单独上传，推荐使用无卡模式上传，这样更加省钱。<br>训练方法为在pytorch环境中输入以下命令：</p><blockquote><ul><li>python train.py</li></ul></blockquote><p>如果要想训练完立刻关机，切换到pytorch环境，可以使用如下命令：</p><blockquote><ul><li>python train.py &amp;&amp; shutdown</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FifthWeek</title>
      <link href="/2023/10/22/FifthWeek/"/>
      <url>/2023/10/22/FifthWeek/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑斯蒂回归"><a href="#逻辑斯蒂回归" class="headerlink" title="逻辑斯蒂回归"></a>逻辑斯蒂回归</h1><p><strong>基本概念</strong><br><strong>回归任务</strong>： y ∈ R 连续的空间<br><strong>逻辑斯蒂回归</strong>： 名字叫回归，但是是做分类的，估算y属于哪一个类别，不是让y等于某一个特定值，因为类别无法进行数值之间的大小比较，而是计算属于每一个分类的概率，概率最大的就是分类的结果。<br><img src="/2023/10/22/FifthWeek/4dcebb51f86e473d8caffe86c355ac13.png" alt="Alt text"><br><strong>二分类</strong>： 只有两个类别的分类问题 且 P(y &#x3D; 1) + P(y &#x3D; 0) &#x3D; 1<br><img src="/2023/10/22/FifthWeek/c8bcede38bb74b3ea3371e4f938002c3.png" alt="Alt text"><br>现在想计算概率属于[0, 1]，而不是实数，使用sigmod()函数将实数空间映射到[0, 1]之间<br><img src="/2023/10/22/FifthWeek/d83d31c93d4e40d2ab26bd8b58b7505f.png" alt="Alt text"><br><strong>sigmod函数特征</strong>：</p><blockquote><ul><li>[-1, 1]</li><li>单调增函数</li><li>饱和函数<br><img src="/2023/10/22/FifthWeek/23805d4692a24b19b59ba426999a8f76.png" alt="Alt text"><br>所以逻辑斯蒂回归就是在线性回归的基础上增加一个sigmod函数，保证输出值在0 ~ 1之间<br><img src="/2023/10/22/FifthWeek/8443b971fc914c05814d8498b5e64bf4.png" alt="Alt text"><br>比较两个分布之间的差异，二分类可以使用交叉熵损失BCE函数，预测值与标签越接近，损失值越小<br><img src="/2023/10/22/FifthWeek/c8c8f28633084c0b923663cae545ad43.png" alt="Alt text"></li></ul></blockquote><h1 id="多维特征的输入"><a href="#多维特征的输入" class="headerlink" title="多维特征的输入"></a>多维特征的输入</h1><p><strong>1、行为记录，列为特征</strong><br><img src="/2023/10/22/FifthWeek/aeef693e8fc6416d99c00837b89d3986.png" alt="Alt text"><br><strong>2、转化</strong><br><img src="/2023/10/22/FifthWeek/d42273ac9ffe4bddae719183f191c7c1.png" alt="Alt text"><br>一般来说，中间层数越多，网络对非线性映射的拟合程度越好，学习能力越强，但是学习能力太强可能会将输入的噪声也学习进去，所以网络学习能力太强也不好，学习应该具有泛化能力。<br><img src="/2023/10/22/FifthWeek/710f15b3eedb47c49e3ac9ab59a0cd9e.png" alt="Alt text"></p><h1 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h1><p><strong>1、mini-batch产生的原因</strong><br><strong>随机梯度下降</strong>： 只用一个样本，具有较好的随机性，可以克服鞍点的问题，但训练时间比较长<br><strong>batch</strong>： 最大化利用向量计算的优势，提升计算的速度，但性能上会遇到一些问题<br><strong>解决办法</strong>： 使用mini-batch来均衡速度和性能上的需求<br><strong>2、DataLoader</strong>工作过程<br>先通过shuffle打乱数据，再将数据分成mini-batch大小<br><img src="/2023/10/22/FifthWeek/2da4ac2b0d984822a39d8823ec84a610.png" alt="Alt text"></p><h2 id="多分类问题"><a href="#多分类问题" class="headerlink" title="多分类问题"></a>多分类问题</h2><p><strong>1、softmax函数</strong><br>糖尿病数据集分类为0和1，MNIST数据集有10个分类怎么办？输出时输出10个y？<br><img src="/2023/10/22/FifthWeek/e64f8e57ffea4b04bc8718c8c17dc0f4.png" alt="Alt text"><br>神经网络希望输出之间是带有竞争性的，即所有概率之和为1，且所有概率均大于0，softmax可以实现这两点。<br><img src="/2023/10/22/FifthWeek/894d599538194658a9c3e8fd8aa38a0b.png" alt="Alt text"><br>图中绿色框中就是指包括softmax的计算过程：<br><img src="/2023/10/22/FifthWeek/691878b759284a599c3f1d537ca43ff7.png" alt="Alt text"></p><h1 id="GAN初入门"><a href="#GAN初入门" class="headerlink" title="GAN初入门"></a>GAN初入门</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>GAN属于人工智能领域：通过对某一事物大量数据的学习，来学习总结出其在数学层面上的分布规律，构建出合理的映射函数，从而解决现实问题</p><blockquote><ul><li><strong>什么是人工智能系统？</strong><br>可以像人一样实现某些功能的机器或计算机  </li><li><strong>为什么要开发人工智能系统？</strong><br>开发具有特定功能的人工智能系统用来为人类服务，因为有些功能人是没办法或很难实现的（如语音识别、人脸识别、围棋预测等）</li><li><strong>人工智能系统具体如何来开发？</strong><br>通过大量数据的学习来总结事物规律——构件映射函数<br>小栗子：直角三角形的规律的学习总结<br>1.通过对大量三角形的学习，我们可以找到规律：有一个角为90°的三角形为直角三角形<br>2.从而构建出直角三角形映射函数:输入x1&#x3D;60°，x2&#x3D;90°，x3&#x3D;30°，输出为1；输入x1&#x3D;70°，x2&#x3D;60°，x3&#x3D;50°，输出为0；<br>人工智能本质上是一个构建数据的映射函数，而构建数据的映射函数需要通过一个学习归纳总结的过程，因此需要提供一个用于学习的模型，而生成对抗网络就是一种用来学习的模型</li></ul></blockquote><h2 id="GAN介绍"><a href="#GAN介绍" class="headerlink" title="GAN介绍"></a>GAN介绍</h2><p><strong>1.1 GAN的基本概念介绍</strong><br>GAN的全称是Generative adversarial network，中文翻译过来就是生成对抗网络。生成对抗网络其实是两个网络的组合：生成网络（Generator）负责生成模拟数据；判别网络Discriminator）负责判断输入的数据是真实的还是生成的。生成网络要不断优化自己生成的数据让判别网络判断不出来，判别网络也要优化自己让自己判断得更准确。二者关系形成对抗，因此叫对抗网络。<br><strong>1.2 GAN的基本架构图</strong><br><img src="/2023/10/22/FifthWeek/528f82cc62114b1aba09e96de3a969e2.png" alt="Alt text"><br><img src="/2023/10/22/FifthWeek/3b09e959ada241d292203421f4708554.jpg" alt="Alt text"><br>生成网络和判别网络都是神经网络的模式。  </p><blockquote><ul><li>**生成器(Generator)**：通过机器生成数据（大部分情况下是图像），最终目的是“骗过”判别器。</li><li>**判别器(Discriminator)**：判断这张图像是真实的还是机器生成的，目的是找出生成器做的“假数据”。</li></ul></blockquote><p><strong>2.一个GAN的形成过程</strong><br>现实问题需求→建立实现功能的GAN框架(编程)→训练GAN(生成网络、对抗网络)→成熟的GAN模型→应用。<br><strong>2.1训练GAN：生成网络和判别网络的训练 (优化)</strong><br>GAN模型不是一上来就能实现具体功能的，需要经历一个训练的过程。我将其训练前后状态称为“原始的GAN模型”和“成熟的GAN模型”，原始的GAN模型要经过一个训练的过程成为一个成熟的GAN模型，而这个“成熟的GAN模型”才是我们实际应用的GAN模型。那么这个训练过程具体是训练什么呢？是训练生成网络(Generator)和判别网络(Discriminator)。而且训练就要涉及到数据集了。</p><blockquote><ul><li>具体怎么训练的概念介绍：</li></ul></blockquote><p>这是一个生成器和判别器博弈的过程。生成器生成假数据，然后将生成的假数据和真数据都输入判别器，判别器要判断出哪些是真的哪些是假的。判别器第一次判别出来的肯定有很大的误差，然后我们根据误差来优化判别器。现在判别器水平提高了，生成器生成的数据很难再骗过判别器了，所以我们得反过来优化生成器，之后生成器水平提高了，然后反过来继续训练判别器，判别器水平又提高了，再反过来训练生成器，就这样循环往复，直到达到纳什均衡。<br><img src="/2023/10/22/FifthWeek/5c503fe0214247ff8b361d1dfb40b05c.png" alt="Alt text"></p><blockquote><ul><li>具体怎么训练的原理介绍（数学层面）：</li></ul></blockquote><p>具体生成网络和对抗网络的优化是如何实现的?继续往下走，这就涉及到两个核心的问题：神经网络的架构和损失函数 (loss function)。神经网络架构和损失函数的定义是能够实现优化（训练）的两个基本要素。</p><p><strong>1）神经网络架构</strong>:之前说了生成网络和对抗网络采用的都是神经网络的框架，也提到了是因为适合才选择神经网络的框架的，那么下面介绍一下为什么神经网络模型适合于事物分布规律的学习（成熟的GAN网络就是学习之后的GAN网络）。<br><img src="/2023/10/22/FifthWeek/fcc8d05a01e6994c560330075bcd271a.png" alt="Alt text"><br>上图所示的就是生成器和判别器里面会采用的神经网络的一个简单的例子展示，这种结构的人工神经网络在学界被称为“多层感知器” ：由输入层(Input Layer)、隐藏层(Hidden Layer)和输出层(Output Layer)组成。<br>输入层：只有一层，用于接收数据的特征X1 、X2……，然后原封不动输出给隐藏层，输入层不进行任何计算。</p><p>隐藏层： 可以一层或多层，对上一层过来的数据进行处理然后输出给下一层，最终输出到输出层。f 指的是激活函数</p><p>输出层： 从隐藏层获取输入并执行计算，作为这些计算结果的计算值Y1 、Y2……充当多层感知器的输出。<br>相邻两层每两个神经元之间的的连线上都有权重W_{ji}（神经元j和神经晕i之间的权重），优化的核心就是优化这些权重参数。怎么优化呢？首先就要引入损失函数，（损失函数相当于误差），有误差，根据误差反过来就可以调整参数。</p><p><strong>2）损失函数(loss function)</strong>:损失函数(loss function)是用来估量模型的预测值与真实值的不一致程度（即误差）。<br>生成网络的损失函数：<br><img src="/2023/10/22/FifthWeek/eq.png" alt="Alt text"><br>上式中，G 代表生成网络，D 代表判别网络，H 代表交叉熵，z 是输入随机数据。<img src="/2023/10/22/FifthWeek/eq%20(2).png" alt="Alt text">是对生成数据的判断概率，1代表数据绝对真实，0代表数据绝对虚假。<img src="/2023/10/22/FifthWeek/eq%20(3).png" alt="Alt text">代表判断结果与1的距离。显然生成网络想取得良好的效果，那就要做到，让判别器将生成数据判别为真数据（即D(G(z))与1的距离越小越好）。</p><p>判别网络的损失函数：<br><img src="/2023/10/22/FifthWeek/eq%20(1).png" alt="Alt text"><br>上式中，<img src="/2023/10/22/FifthWeek/eq%20(4).png" alt="Alt text">是真实数据，这里要注意的是，代表真实数据与1的距离，<img src="/2023/10/22/FifthWeek/eq%20(5).png" alt="Alt text">代表生成数据与0的距离。显然，识别网络要想取得良好的效果，那么就要做到，在它眼里，真实数据就是真实数据，生成数据就是虚假数据（即真实数据与1的距离小，生成数据与0的距离小）。  </p><blockquote><ul><li>优化原理：生成网络和判别网络有了损失函数，就可以基于各自的损失函数，利用误差反向传播（Backpropagation）(BP)反向传播算法和最优化方法(如梯度下降法)来实现参数的调整），不断提高生成网络和判别网络的性能（最终生成网络和判别网络的成熟状态就是学习到了合理的映射函数）。</li></ul></blockquote><p><strong>3.卷积神经网络</strong><br>我们在学习中GAN时经常遇到“卷积”，对于一部分人来说，时常弄不清楚“卷积”与GAN之间的关系。下面我来介绍一下我理解的“卷积”和GAN之间的区别与联系。“卷积”在这里指的是卷积神经网络（我理解为在神经网络架构上利用卷积的原理来实现某种功能的一种特定神经网络架构），众所周知，卷积神经网络对于图像特征提取具有十分优异的性能，而很多GAN又都是跟图像有关系的（例如图像识别、图形转换等），因此卷积和神经网络就自然而然的结合了起来。</p><p><strong>4.总结</strong>   </p><blockquote><ul><li>1.生成网络和判别网络的网络架构</li></ul></blockquote><p>以深度卷积神将网络为例(DCGAN)<br>生成网络:卷积神经网络+反卷积神经网络(前者负责提取图像特征，后者负责根据输入的特征重新生成图像（即假数据）)。反卷积神经网络在此不做介绍，有兴趣的同学自行学习。<br>判别网络：卷积神经网络+全连接层处理(传统神经网络)(前者负责提取图像特征，后者负责判别真假。)</p><blockquote><ul><li>2.神经网络的基本概念</li></ul></blockquote><p>以神经元为基本单元，通过设置不同参数和设计不同形式而构成的网络模型。</p><blockquote><ul><li>3.GAN的核心要点</li></ul></blockquote><p>GAN的核心要点我觉得主要体现在GAN训练的核心上，即神经网络架构和损失函数基础下的误差反向传播。</p><blockquote><ul><li>4.卷积神经网络</li></ul></blockquote><p>卷积神经网络和GAN的关系:卷积神经网络对于处理图像相关的GAN来讲至关重要，是提取图像特征的重要工具；卷积神经网络与传统的多层感知器网络的对比；卷积神经网络的卷积操作的介绍。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ForthWeek</title>
      <link href="/2023/10/15/ForthWeek/"/>
      <url>/2023/10/15/ForthWeek/</url>
      
        <content type="html"><![CDATA[<h1 id="Linear-Model-线性模型"><a href="#Linear-Model-线性模型" class="headerlink" title="Linear Model(线性模型)"></a>Linear Model(线性模型)</h1><p>准备Dataset—&gt;选择&#x2F;设计Model—&gt;训练（人工启动）—&gt;应用：infer（推理）<br><img src="/2023/10/15/ForthWeek/380f338a4f054010924b7db08421d09c.png" alt="Alt text">前三个数据为training，最后一个为test。<br>模型看不到y的两种情况：   </p><blockquote><ul><li>测试test   </li><li>模型上线后的推理</li></ul></blockquote><p><img src="/2023/10/15/ForthWeek/5d2f8097ce184e22bae773629cd21e58.png" alt="Alt text"><br>整个数据集分为：   </p><blockquote><p>1.训练集：看得见x和y<br>实际将训练集再次一分为二   </p><ul><li>训练集：训练（过拟合：训练集误差很小，但也学了噪声）</li><li>开发集：评估（又叫验证集）<br>2.测试集：只看得到x（判断模型的泛化能力，即对没见过的图像能否进行较好的识别）</li></ul></blockquote><p><img src="/2023/10/15/ForthWeek/420d902ae2d84d3f908408552aa06535.png" alt="Alt text"></p><blockquote><p>选择模型：一般先拿线性模型试试，效果不好再拿其他复杂的模型<br>如何找到最优权重w？   </p><ul><li>机器学习一般首先w取随机数（w &#x3D; random value）   </li><li>取了一个权重w后，评估偏移&#x2F;计算误差（Evaluate Model Error）</li></ul></blockquote><p>对于一个样本来说：Loss Function<br><img src="/2023/10/15/ForthWeek/0d0667930cf04a368c0fe3b9b4d17403.png" alt="Alt text"><br>对于Training Set来说：Const Function 平均平方误差（MSE）<br><img src="/2023/10/15/ForthWeek/7573a26c72974341ae9d0f9663cfdf5e.png" alt="Alt text"><br>穷举法：每一点都计算损失（实际中会先采样）<br><img src="/2023/10/15/ForthWeek/e635531789d74e50adf3856b992e20ef.png" alt="Alt text"></p><h1 id="梯度下降算法"><a href="#梯度下降算法" class="headerlink" title="梯度下降算法"></a>梯度下降算法</h1><p>1、算法思路及存在的问题<br><img src="/2023/10/15/ForthWeek/a622c46652a847169bc0a5231a8be6c3.png" alt="Alt text"></p><blockquote><p>穷举思路：全部找一遍，找出最优点<br>存在问题：   </p><ul><li>通常情况下，图形不会这么光滑，一眼看出最优先</li><li>比如多维权重，用穷举法会导致搜索量太大。</li></ul></blockquote><blockquote><p>分治思路：分成四份，找16个点，找出其中比较小的块，再分成四份，找点，即局部最优点。</p><ul><li>如果是凸函数，可以用分治法<br><img src="/2023/10/15/ForthWeek/b3d20b861be5431ca6e413c0c82338db.png" alt="Alt text"></li><li>但如果是不规则的函数，可能会错过最优点<br><img src="/2023/10/15/ForthWeek/0a86ccdea26f42578023b5fbaeb36873.png" alt="Alt text"></li></ul></blockquote><p>优化问题： 求权重函数的最小值<br><img src="/2023/10/15/ForthWeek/ee972af5fca0454fa530ab5a539e23c2.png" alt="Alt text"><br>梯度下降： 每次往梯度的负方向走一点<br><img src="/2023/10/15/ForthWeek/bea4603a9e2e42a39675ed904755ce16.png" alt="Alt text"><br>可以得到局部最优点，类似贪心算法，但是没办法保证找到全局最优点<br><img src="/2023/10/15/ForthWeek/4c508c65ba0a4be196a862842681df73.png" alt="Alt text"><br>目前很多使用梯度下降算法，因为在实际应用过程中很难陷入局部最优点，不是很多，但是会存在鞍点，即梯度为0，会导致算法无法继续迭代<br><img src="/2023/10/15/ForthWeek/355eec98ddb54c0bba4e4f0dfa38a8cd.png" alt="Alt text"><br><img src="/2023/10/15/ForthWeek/3189335cc0834ab794e790979619cb42.png" alt="Alt text"><br>使用较多的是随机梯度下降：随机选一个样本损失对权重求导然后进行更新<br><img src="/2023/10/15/ForthWeek/52a7dfa6d6c049d6995fe4189a3499ae.png" alt="Alt text"></p><blockquote><p>存在的问题：<br>梯度下降： 计算梯度可以并行，学习器的性能较低，效率最高<br>随机梯度下降： 计算梯度不可以并行，学习器的性能较好，但时间复杂度较高<br>解决办法：<br>折中： Batch&#x2F;Mini - batch 批量的随机梯度下降</p></blockquote><h1 id="反向传播（backward）"><a href="#反向传播（backward）" class="headerlink" title="反向传播（backward）"></a>反向传播（backward）</h1><h2 id="目的：-在图上面进行梯度的传播，帮助建立更具有弹性的模型结构"><a href="#目的：-在图上面进行梯度的传播，帮助建立更具有弹性的模型结构" class="headerlink" title="目的： 在图上面进行梯度的传播，帮助建立更具有弹性的模型结构"></a>目的： 在图上面进行梯度的传播，帮助建立更具有弹性的模型结构</h2><h2 id="反向传播："><a href="#反向传播：" class="headerlink" title="反向传播："></a>反向传播：</h2><p>如果是非常复杂的网络，无法直接计算。<br>但是如果把网络看作图，通过图传播梯度，就能把梯度计算出来，即反向传播。<br><img src="/2023/10/15/ForthWeek/58ba928759ef47379ef80755e5d26e33.png" alt="Alt text"><br><img src="/2023/10/15/ForthWeek/8dd3f1dc79fe48f3880f7a2579fa82e2.png" alt="Alt text"><br><img src="/2023/10/15/ForthWeek/234a771079734981bbcde336a547c03e.png" alt="Alt text"><br>发现每一层都可以变成 y &#x3D; w * x + b ，为了增加网络复杂程度，添加一个激活函数<br><img src="/2023/10/15/ForthWeek/7447618e77074095b7296baa82782218.png" alt="Alt text"><br>链式求导法则<br><img src="/2023/10/15/ForthWeek/fc439df582914975a3dea92ddaa4b441.png" alt="Alt text"></p><h2 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h2><blockquote><ul><li>创建计算图 前馈运算 得到z  </li><li>计算局部梯度  </li><li>反向 得到Loss对z的偏导  </li><li>使用链式求导计算 Loss对x的偏导 Loss对y的偏导</li></ul></blockquote><p><img src="/2023/10/15/ForthWeek/438dc0d2634945af899dd1901cdfd080.png" alt="Alt text"><br>具体例子：<br><img src="/2023/10/15/ForthWeek/d464d8e207d74c2bb160b34e70840625.png" alt="Alt text"><br>得到相应的梯度之后，就可以进行权重的更新了<br><img src="/2023/10/15/ForthWeek/328213866fe94a32926aeaec1c194ccf.png" alt="Alt text"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ThirdWeek</title>
      <link href="/2023/10/08/ThirdWeek/"/>
      <url>/2023/10/08/ThirdWeek/</url>
      
        <content type="html"><![CDATA[<h1 id="DataLoader的使用"><a href="#DataLoader的使用" class="headerlink" title="DataLoader的使用"></a>DataLoader的使用</h1><p>torch的DataLoader主要是用来加载数据，就是给定已知的数据集，把数据集装载进DataLoader，然后送入深度学习网络进行训练。</p><blockquote><p>DataLoader(dataset, batch_size&#x3D;1, shuffle&#x3D;False, sampler&#x3D;None,<br>           batch_sampler&#x3D;None, num_workers&#x3D;0, collate_fn&#x3D;None,<br>           pin_memory&#x3D;False, drop_last&#x3D;False, timeout&#x3D;0,<br>           worker_init_fn&#x3D;None, *, prefetch_factor&#x3D;2,<br>           persistent_workers&#x3D;False)</p></blockquote><p>其中部分参数如下：</p><blockquote><ul><li>dataset(Dataset)-数据类型（Dataset），需要装载进Data Loader的原始数据集。  </li><li>batch_size(int,optional)-数据类型（int，可选项【批次的大小，默认为1】）  </li><li>shuffle(bool,optional)-数据类型（bool，可选项【每个循环是否需要重新打乱或洗牌】）   </li><li>sampler(Sampler or lterable,optional)-（可选项，定义了从数据集获取样本的策略，可以是任何实现了__len__的迭代器类型，如果使用了这个选项，shuffle不可再设置）  </li><li>drop_last (bool, optional)-数据类型：bool，可选项，若设置为True，如果数据集不能被批除尽，则舍弃最后一个不满足整批的样本，若设置为False，如果数据集不能被批除尽，则保留最后一个不满足整批的样本。</li></ul></blockquote><h1 id="神经网络的基本骨架-nn-Module"><a href="#神经网络的基本骨架-nn-Module" class="headerlink" title="神经网络的基本骨架-nn.Module"></a>神经网络的基本骨架-nn.Module</h1><p>1.创建神经网络<br>在创建的时候，我们需要继承torch.nn.Module这个类，之后需要创建两个函数：  </p><blockquote><p>(1) _<em>init</em>_()函数;<br>(2) forward()函数；</p></blockquote><p>代码如下：<br><img src="/2023/10/08/ThirdWeek/image.png" alt="Alt text"></p><h1 id="卷积层的使用"><a href="#卷积层的使用" class="headerlink" title="卷积层的使用"></a>卷积层的使用</h1><p>nn.Conv2d:<br>这是二维卷积的方法，一般用于处理二维图像。<br>其参数如下：  </p><blockquote><ul><li>in_channels：输入特征图（feature map）的通道数，即图像的深度（depth）；  </li><li>out_channels：输出特征图的通道数；  </li><li>kernel_size：卷积核的大小；  </li><li>stride：卷积核的步幅（stride）；  </li><li>padding：前向计算时在输入特征图周围添加的像素数（padding）；</li></ul></blockquote><p><img src="/2023/10/08/ThirdWeek/u=522352886,783513783&fm=253&fmt=auto&app=138&f=JPEG.webp" alt="Alt text"><br>卷积的操作如图所示，将一个卷积核和被卷积数据进行比对然后求乘积之和，最后生成一个新的数据集。</p><p>准备数据：<br><img src="/2023/10/08/ThirdWeek/Snipaste_2023-10-08_16-42-24.png" alt="Alt text"><br>三种不同的卷积方式：<br><img src="/2023/10/08/ThirdWeek/Snipaste_2023-10-08_16-43-37.png" alt="Alt text"><br>得出卷积后的结果：<br><img src="/2023/10/08/ThirdWeek/Snipaste_2023-10-08_16-44-34.png" alt="Alt text"></p><h1 id="最大池化层的使用"><a href="#最大池化层的使用" class="headerlink" title="最大池化层的使用"></a>最大池化层的使用</h1><p>在神经网络中 池化层是比较重要的，是提取重要信息的操作，可以去掉不重要的信息，减少计算开销。<br>nn.MaxPool2d:<br>最大池化层，可以用来对信息进行提取减少计算。<br>参数如下：</p><blockquote><ul><li>kernel_size ：表示做最大池化的窗口大小，可以是单个值，也可以是tuple元组  </li><li>stride ：步长，可以是单个值，也可以是tuple元组  </li><li>padding ：填充，可以是单个值，也可以是tuple元组  </li><li>dilation ：控制窗口中元素步幅  </li><li>return_indices ：布尔类型，返回最大值位置索引  </li><li>ceil_mode ：布尔类型，为True，用向上取整的方法，计算输出形状；默认是向下取整。</li></ul></blockquote><h1 id="非线性激活函数"><a href="#非线性激活函数" class="headerlink" title="非线性激活函数"></a>非线性激活函数</h1><p>1.sigmoid<br><img src="/2023/10/08/ThirdWeek/Snipaste_2023-10-08_17-08-23.png" alt="Alt text"><br>输出：0-1，对于一个极大的负值，输出接近0.对于一个极大的正值，输出接近1<br>功能：常用于二分类的最后一层。<br>弊端：当输入接近无穷大或无穷小时，输出变换小，求导（斜率）约为0，容易梯度缺失。不是原点中心对称，有可能造成梯度更新缓慢。输出总是正数。</p><p>2.ReLu<br>定义：f(x)&#x3D;max(0,x)<br>优点：容易计算<br>缺点：左边梯度为0</p><h1 id="线性层的使用"><a href="#线性层的使用" class="headerlink" title="线性层的使用"></a>线性层的使用</h1><p>1.什么是线性层<br>线性层又叫全连接层，其中每个神经元与上一层所有神经元相连，一个简单的线性层如下图所示：<br><img src="/2023/10/08/ThirdWeek/20802f84f69c4ccb87d60a73c9e2235b.png" alt="Alt text"><br>线性函数为：</p><blockquote><p>torch.nn.Linear(in_features, out_features, bias&#x3D;True, device&#x3D;None, dtype&#x3D;None)</p></blockquote><p>重要参数如下：  </p><blockquote><ul><li>in_features：每个输入（x）样本的特征的大小</li><li>out_features：每个输出（y）样本的特征的大小</li><li>bias：如果设置为False，则图层不会学习附加偏差。默认值是True，表示增加学习偏置。<br> 在上图中，in_features&#x3D;d，out_features&#x3D;L。</li></ul></blockquote><p>简单的线性层操作如下图所示<br><img src="/2023/10/08/ThirdWeek/Snipaste_2023-10-08_17-16-19.png" alt="Alt text"></p><p>可以看到：</p><p>原来图片是 ([64, 3, 32, 32])<br>首先经过reshape操作，将其变为 ([1, 1, 1, 196608])<br>这里，该作用相当于：  </p><blockquote><p>torch.flatten(imgs)</p></blockquote><p>再通过线性层，变为 ([1, 1, 1, 10])</p><h1 id="Sequential的使用"><a href="#Sequential的使用" class="headerlink" title="Sequential的使用"></a>Sequential的使用</h1><p>根据简单的案例引入sequential的使用  </p><p>1、CIFAR10 model的结构：<br><img src="/2023/10/08/ThirdWeek/8e83782da6974bd4bcbad43605642a00.png" alt="Alt text"><br>2.定义网络：<br><img src="/2023/10/08/ThirdWeek/Snipaste_2023-10-08_17-37-39.png" alt="Alt text"><br>运行结果如下：<br><img src="/2023/10/08/ThirdWeek/Snipaste_2023-10-08_17-38-52.png" alt="Alt text"><br>3.改用Sequential定义网络：<br><img src="/2023/10/08/ThirdWeek/Snipaste_2023-10-08_17-40-50.png" alt="Alt text"><br>运行结果如下；<br><img src="/2023/10/08/ThirdWeek/Snipaste_2023-10-08_17-41-50.png" alt="Alt text"><br>可以看到使用了Sequential之后代码简洁了很多。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SecondWeek</title>
      <link href="/2023/09/29/SecondWeek/"/>
      <url>/2023/09/29/SecondWeek/</url>
      
        <content type="html"><![CDATA[<h1 id="这次国庆放假，未写学习总结。"><a href="#这次国庆放假，未写学习总结。" class="headerlink" title="这次国庆放假，未写学习总结。"></a>这次国庆放假，未写学习总结。</h1><p><img src="/2023/09/29/SecondWeek/Snipaste_2023-10-08_17-48-21.png" alt="Alt text"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FirstWeek</title>
      <link href="/2023/09/23/FirstWeek/"/>
      <url>/2023/09/23/FirstWeek/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Anaconda以及在Anaconda中安装Pytorch"><a href="#安装Anaconda以及在Anaconda中安装Pytorch" class="headerlink" title="安装Anaconda以及在Anaconda中安装Pytorch"></a>安装<em>Anaconda</em>以及在<em>Anaconda</em>中安装<em>Pytorch</em></h1><p>首先去清华镜像源下载<em>Anaconda</em>安装包，然后一路next进行安装，勾选环境变量就ok。<br>然后调出<em>Anaconda</em>的命令行创建Pytorch虚拟环境，命令如下。  </p><blockquote><p>conda create -n pytorch python&#x3D;3.8<br>conda activate pytorch 进入已经创建的虚拟环境。</p></blockquote><p>安装<em>Pytorch</em>：<br>建议离线下载安装，网址如下：  </p><blockquote><p><a href="https://download.python.org/">https://download.python.org</a>   </p></blockquote><p>首先在<em>Anaconda</em>命令行进入离线文件所在的文件夹，然后输入命令：*pip install “文件名字” 然后加一个镜像源，回车。</p><p>测试是否安装成功，代码如下：  </p><pre><code>import torchimport torchvisionprint(torch.__version__)</code></pre><p>如果如下图所示出现版本号则安装成功。</p><p>关闭<em>Anaconda</em>虚拟环境命令如下：  </p><blockquote><p>conda deactivate</p></blockquote><p><img src="/2023/09/23/FirstWeek/image-9.png" alt="Alt text"></p><h1 id="Learn-Pytorch-TensorBoard"><a href="#Learn-Pytorch-TensorBoard" class="headerlink" title="Learn Pytorch-TensorBoard"></a>Learn Pytorch-TensorBoard</h1><p><strong>Pytorch使用Tensorboard主要使用三个API</strong>     </p><p> — <em>SummaryWriter</em>：用来创建一个<em>log</em>文件，<em>TensorBoard</em>面板查看时，也是需要查看这个log文件。    </p><p> — <em>add_something</em>：向<em>log</em>文件中添加数据。例如可以通过<em>add_scalar</em>添加折线图数据，<em>add_image</em>可以添加图片。 </p><p> —    <em>close</em>：当训练结束后我们可以使用<em>close</em>方法结束log写入。</p><p><strong>Tensorboard启动</strong>    </p><p>首先要new一个<em>SummaryWriter</em>对象，然后向<em>log</em>中写入数据，最后在终端数据命令:</p><blockquote><p>tensorboard –logdir&#x3D;log(log文件夹名称)   </p></blockquote><p><img src="/2023/09/23/FirstWeek/image.png" alt="Alt text"><br><img src="/2023/09/23/FirstWeek/image-0.png" alt="Alt text"><br>点击链接就可以启动，如下图所示。  </p><p><img src="/2023/09/23/FirstWeek/image-1.png" alt="Alt text"></p><h1 id="Learn-Pytorch-Tensorforms"><a href="#Learn-Pytorch-Tensorforms" class="headerlink" title="Learn Pytorch-Tensorforms"></a>Learn Pytorch-Tensorforms</h1><p>— <em>tensorforms</em>常用类的方法有 <em>ToTensor</em>、<em>Normalize</em>、<em>Resize</em>、<em>Compose</em>、<em>RandomCrop</em>。  </p><p>在学习<em>tensorforms</em>前，首先需要学习一下常用的图片读取方式，以及读取后output的格式。</p><p><img src="/2023/09/23/FirstWeek/image-2.png" alt="Alt text">  </p><p>读取PIL图片：PIL图片可以理解微图片的基准类型，在此类型上进行各种格式的转换。</p><p><img src="/2023/09/23/FirstWeek/image-3.png" alt="Alt text"></p><p><strong>ToTensor 的使用（transforms.ToTensor）</strong><br><em>ToTensor</em>是<em>transforms</em>中的一个类，它可以被用来将<em>PIL Image</em>或者<em>numpy.ndarry</em>类型的图片格式转换为<em>tensor</em>格式。<br>代码如下图所示：</p><p><img src="/2023/09/23/FirstWeek/image-4.png" alt="Alt text"></p><p><strong>Normalize 的使用（transfoems.Normalize）</strong><br>根据传入的<em>mean</em>和<em>standard</em>将<em>tensor</em>格式的图片做归一化处理。只支持<em>tensor</em>格式，不支持<em>PIL</em>格式。<br>处理公式如下：</p><blockquote><p>output[channel] &#x3D; (input[channel] - mean[channel]) &#x2F; std[channel]</p></blockquote><p><img src="/2023/09/23/FirstWeek/image-5.png" alt="Alt text"></p><p><strong>Resize 的使用（transforms.Resize）</strong><br>对<em>PIL</em>或者<em>Tensor</em>类型图片重新调整大小，可以接受<em>sequence</em>或者<em>int</em>两种类型的参数。</p><p><em>sequence</em>：(H,W)。高H，宽W<br><em>int</em>：int。当参数为int时，会将图片W&#x2F;H中较小的边缘将会按int进行调整。</p><p><img src="/2023/09/23/FirstWeek/image-6.png" alt="Alt text"></p><p><strong>Compose 的使用（transforms.Compose）</strong><br>将<em>transforms</em>中的各种图像操作进行缝合，但是要注意，前一个变换的<em>output</em>的数据类型必须与后一个变换的<em>input</em>的数据类型相匹配。</p><p><img src="/2023/09/23/FirstWeek/image-7.png" alt="Alt text"></p><p><strong>RandomCrop 的使用（transforms.RandomCrop）</strong><br>对<em>PIL</em>或者<em>Tensor</em>类&#x3D;类型图片进行随机裁剪，可以接受<em>sequence</em>或者<em>int</em>两种类型的参数。  </p><p><em>sequence</em>：(H,W)。高H，宽W<br><em>int</em>：int。当参数为int时，将会进行int*int的裁剪。</p><p><img src="/2023/09/23/FirstWeek/image-8.png" alt="Alt text"></p><h1 id="torchvision中常用的数据集"><a href="#torchvision中常用的数据集" class="headerlink" title="torchvision中常用的数据集"></a>torchvision中常用的数据集</h1><p><strong>torchvision 基本介绍</strong><br><em>torchvision</em>是<em>pytorch</em>的一个图形库，它服务于<em>PyTorch</em>深度学习框架的，主要用来构建计算机视觉模型。一下是<em>torchvision</em>的基本构成。<br>1.<em>torchvision.datasets</em>：一些加载数据的函数集常用的数据集接口。<br>2.<em>torchvision.models</em>：包含常用的模型结构（含预训练模型），例如AlenNet、VGG等。<br>3.<em>torchvision.transforms</em>：常用的图片变换例如裁剪，旋转等。<br>4.<em>torchvision.utils</em>：其他的一些有用的方法。  </p><p><strong>torchvision 查看数据集</strong><br>可以在官网文档中查看数据集及其用法。  </p><p><strong>CIFAR10 数据集的使用</strong><br>使用CIFAR10数据集作为示范。<br>代码如下：  </p><p><img src="/2023/09/23/FirstWeek/image-10.png" alt="Alt text">  </p><p>分别实现了对数据的下载，从PIL格式转换成tensor格式，然后以其中10个图片作为展示，在tensorboard中展示出来。由于图像的分辨率较低，只有28×28，所以在tensorboard中的视觉效果较为模糊。tensorboard中的展示效果如下所示：  </p><p><img src="/2023/09/23/FirstWeek/image-11.png" alt="Alt text"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/23/hello-world/"/>
      <url>/2023/07/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
